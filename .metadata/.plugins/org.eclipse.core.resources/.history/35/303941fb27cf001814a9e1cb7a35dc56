//============================================================================
// Name        : Zero_Sum.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <bits/stdc++.h>

using namespace std;
vector<string> solutions;
ifstream fin ("zerosum.in");
ofstream fout ("zerosum.out");
int N;

bool equalZero(vector<char> functions){
	stack<int> numbers;
	stack<char> operators;

	for(int i = (int) functions.size() + 1; i >= 1; i--){
		numbers.push(i);
	}

	for(int i = (int) functions.size() - 1; i >= 0; i--){
		operators.push(functions[i]);
	}

	while(!operators.empty()){
		char op = operators.top();
		operators.pop();
		int a = numbers.top();
		numbers.pop();
		int b = numbers.top();
		numbers.pop();

		if(op == ' '){
			numbers.push(10 * a + b);
		}else{
			if(!operators.empty() && operators.top() == ' '){
				operators.pop();
				int c = numbers.top();
				numbers.pop();
				numbers.push(b * 10 + c);
				numbers.push(a);
				operators.push(op);
			}
			else{
				if(op == '+'){
					numbers.push(a + b);
				}
				else if(op == '-'){
					numbers.push(a - b);
				}
			}
		}
	}

	return (numbers.top() == 0);
}

void print(vector<char> algorithm){
	fout << 1;

	for(int i = 2; i <= (int) algorithm.size(); i++){
		fout << algorithm[i] << i;
	}

	fout << endl;

}

void helper(vector<char> algorithm){
	if((int) algorithm.size() == N - 1){

		for(int i = 0; i < (int) algorithm.size(); i++){
			cout << algorithm[i] << " ";
		}

		cout << endl;

		if(equalZero(algorithm)){
			print(algorithm);
		}
		return;
	}

	//add
	algorithm.push_back('+');
	helper(algorithm);
	algorithm.pop_back();

	//subtract
	algorithm.push_back('-');
	helper(algorithm);
	algorithm.pop_back();

	//blank
	algorithm.push_back(' ');
	helper(algorithm);
}

int main() {
	vector<char> algorithm;
	fin >> N;

//	helper("1", 2, 1);
	helper(algorithm);

//	for(int i = 0; i < (int) solutions.size(); i++){
//		cout << solutions[i] << endl;
//	}

	return 0;
}
