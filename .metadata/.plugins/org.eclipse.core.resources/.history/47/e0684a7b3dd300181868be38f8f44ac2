#include <bits/stdc++.h>

using namespace std;
vector<pair<int, int>> first;
vector<pair<int, int>> second;

void floodfill(vector<vector<char>>& hide, char spot, int i, int j){
	if(i < 0 || i > (int) hide.size()){
		return;
	}
	if(j < 0 || j > (int) hide[0].size()){
		return;
	}
	if(hide[i][j] == '1' || hide[i][j] == '.'){
		return;
	}

	hide[i][j] = spot;
	if(spot == '1'){
		first.push_back({i, j});
	}
	if(spot == '2'){
		second.push_back({i, j});
	}

	int dx[] = {0, 1, 0, -1};
	int dy[] = {1, 0, -1, 0};

	for(int k = 0; k < 4; k++){
		floodfill(hide, spot, i + dx[k], j + dy[k]);
	}
}

int main() {
	int N, M;
	ifstream fin ("pageant.in");
	ofstream fout ("pageant.out");
	vector<vector<char>> hide;
	fin >> N >> M;

	for(int i = 0; i < N; i++){
		vector<char> row;

		for(int j = 0; j < M; j++){
			char input;
			fin >> input;
			row.push_back(input);
		}

		hide.push_back(row);
	}

	int spot = '1';

	for(int i = 0; i < (int) hide.size(); i++){
		for(int j = 0; j < (int) hide[i].size(); j++){
			if(hide[i][j] == '.' || hide[i][j] == '1'){
				continue;
			}

			floodfill(hide, spot, i, j);
			spot = '2';
		}
	}

	cout << "first" << endl;

	for(int i = 0; i < (int) first.size(); i++){
		cout << first[i].first << " " << first[i].second << endl;
	}

	cout << "second" << endl;

	for(int i = 0; i < (int) second.size(); i++){
		cout << second[i].first << " " << second[i].second << endl;
	}

	int minimum = INT_MAX;
	pair<int, int> coordinate;

	for(int i = 0; i < (int) first.size(); i++){
		for(int j = i + 1; j < (int) second.size() ; j++){
			int X = (first[i].first - second[j].first) * (first[i].first - second[j].first);
			int Y = (first[i].second - second[j].second) * (first[i].second - second[j].second);
			int distance = X + Y;

			cout << distance << endl;

			if(distance < minimum){
				minimum = distance;
				coordinate.first = i;
				coordinate.second = j;
			}
		}
	}

	pair<int, int> start = first[coordinate.first];
	pair<int, int> end = second[coordinate.second];
	int answer = abs(start.first - end.first) + abs(start.second - end.second);

	fout << answer << endl;

	return 0;
}
